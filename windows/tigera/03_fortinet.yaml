---
# Required RBAC:
# - watch/list nodes and pods
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tigera-firewall-controller
  namespace: tigera-firewall-controller

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tigera-firewall-controller
rules:
  - apiGroups: [""]
    resources:
      - secrets
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - pods
    verbs:
      - list
      - get
      - watch
  - apiGroups: [""]
    resources:
      - nodes
    verbs:
      - list
      - get
      - watch
  - apiGroups: ["projectcalico.org"]
    resources: ["tier.globalnetworkpolicies"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["projectcalico.org"]
    resources: ["tiers"]
    verbs: ["get", "watch", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tigera-firewall-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tigera-firewall-controller
subjects:
  - kind: ServiceAccount
    name: tigera-firewall-controller
    namespace: tigera-firewall-controller

---
# The actual firewall-controller deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tigera-firewall-controller
  namespace: tigera-firewall-controller
  labels:
    k8s-app: tigera-firewall-controller
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      k8s-app: tigera-firewall-controller
  template:
    metadata:
      name: tigera-firewall-controller
      namespace: tigera-firewall-controller
      labels:
        k8s-app: tigera-firewall-controller
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: tigera-firewall-controller
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      imagePullSecrets:
        - name: tigera-pull-secret
      containers:
        - name: tigera-firewall-controlller
          image: quay.io/tigera/firewall-integration:v3.16.3
          imagePullPolicy: IfNotPresent
          env:
            - name: ENABLED_CONTROLLERS
              value: "fortinet"
            - name: LOG_LEVEL
              value: "info"
            - name: FW_INSECURE_SKIP_VERIFY
              value: "true"
            - name: FW_POLICY_SELECTOR_EXPRESSION
              valueFrom:
                configMapKeyRef:
                  name: tigera-firewall-controller
                  key: tigera.firewall.policy.selector
            - name: FW_ADDRESS_SELECTION
              valueFrom:
                configMapKeyRef:
                  name: tigera-firewall-controller
                  key: tigera.firewall.addressSelection
            - name: FW_FORTIGATE_CONFIG_PATH
              value: "/etc/tigera/fortigate-configs.yaml"
            - name: FW_FORTIMGR_CONFIG_PATH
              value: "/etc/tigera/fortimgr-configs.yaml"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            runAsGroup: 10001
            runAsNonRoot: true
            runAsUser: 10001
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: firewall-configuration
              mountPath: /etc/tigera/
      volumes:
        - name: firewall-configuration
          configMap:
            defaultMode: 420
            items:
              - key: tigera.firewall.fortigate
                path: fortigate-configs.yaml
              - key: tigera.firewall.fortimgr
                path: fortimgr-configs.yaml
            name: tigera-firewall-controller-configs

---
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.tigera-firewall-controller-access
  namespace: tigera-firewall-controller
spec:
  order: 1
  tier: allow-tigera
  selector: k8s-app == 'tigera-firewall-controller'
  types:
    - Ingress
    - Egress
  ingress:
    - action: Deny
  egress:
    - action: Allow
      protocol: TCP
      source: {}
      destination:
        # This policy allows Firewall controller to communicate with kubernetes api server.
        namespaceSelector: projectcalico.org/name == "default"
        selector: (provider == "kubernetes" && component == "apiserver" && endpoints.projectcalico.org/serviceName == "kubernetes")
        # By default, kubernetes api server listens on [6443, 443]. If Api server is customized to listen
        # on different port, Include the port number below.
        ports: [443, 6443]
    - action: Allow
      protocol: TCP
      destination:
        # This policy allows Firewall controller to communicate via IPv4 with external Fortigate firewall.
        nets: ["0.0.0.0/0"]
        ports:
          - 443
    - action: Allow
      protocol: TCP
      destination:
        # This policy allows Firewall controller to communicate via IPv6 with external Fortigate firewall.
        nets: ["::/0"]
        ports:
          - 443
    - action: Allow
      protocol: UDP
      destination:
        # This policy allows Firewall controller to communicate with kube-dns.
        selector: k8s-app == "kube-dns"
        ports:
          - 53
